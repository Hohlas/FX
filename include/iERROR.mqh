bool ERROR_CHECK(){ // ѕроверка проведени€ операций с ордерами:
   bool repeat=true;
   int err=GetLastError(); //err=141;
   if (err==0) return(false);
   str=str+" !ERROR-"+DoubleToStr(err,0)+": "+ErrorDescription(err);
   switch (err){   
      case 4:    Sleep(5000);   break;   // “орговый сервер зан€т. ћожно повторить попытку через достаточно большой промежуток времени (от нескольких минут).
      case 6:    Connect();     break;   // Ќет св€зи с торговым сервером. Ќеобходимо убедитьс€, что св€зь не нарушена (например, при помощи функции IsConnected) и через небольшой промежуток времени (от 5 секунд) повторить попытку.
      case 8:    Sleep(5000);   break;   // —лишком частые запросы. Ќеобходимо уменьшить частоту запросов, изменить логику программы.
      case 128:  Sleep(5000);   break;   // »стек срок ожидани€ совершени€ сделки. ѕрежде, чем производить повторную попытку (не менее, чем через 1 минуту), необходимо убедитьс€, что торгова€ операци€ действительно не прошла (нова€ позици€ не была открыта, либо существующий ордер не был изменЄн или удалЄн, либо существующа€ позици€ не была закрыта)
      case 129:  Sleep(5000);   break;   // Ќеправильна€ цена bid или ask, возможно, ненормализованна€ цена. Ќеобходимо после задержки от 5 секунд обновить данные при помощи функции RefreshRates и повторить попытку. ≈сли ошибка не исчезает, необходимо прекратить все попытки торговых операций и изменить логику программы. 
      case 135:                 break;   // ÷ена изменилась. ћожно без задержки обновить данные при помощи функции RefreshRates и повторить попытку.
      case 136:  Sleep(5000);   break;   // Ќет цен. Ѕрокер по какой-то причине (например, в начале сессии цен нет, неподтвержденные цены, быстрый рынок) не дал цен или отказал. Ќеобходимо после задержки от 5 секунд обновить данные при помощи функции RefreshRates и повторить попытку.
      case 137:  Sleep(5000);   break;   // Ѕрокер зан€т
      case 138:                 break;   // «апрошенна€ цена устарела, либо перепутаны bid и ask. ћожно без задержки обновить данные при помощи функции RefreshRates и повторить попытку. ≈сли ошибка не исчезает, необходимо прекратить все попытки торговых операций и изменить логику программы.   
      case 141:  Sleep(5000);   break;   // —лишком много запросов. Ќеобходимо уменьшить частоту запросов, изменить логику программы.
      case 145:  Sleep(5000);   break;   // ћодификаци€ запрещена, так как ордер слишком близок к рынку и заблокирован из-за возможного скорого исполнени€. ћожно не ранее, чем через 15 секунд, обновить данные при помощи функции RefreshRates и повторить попытку.
      case 146:  ContextBusy(); break;   // ѕодсистема торговли зан€та. ѕовторить попытку только после того, как функци€ IsTradeContextBusy вернет FALSE. 
      default:   repeat=false;  break;
      }
   Report(str); // 
   ERROR_LOG(); // фиксируем ошибки в файл с указанием типа ордера, при котором она возникла
   MARKET_INFO();
   return(repeat);
   }  
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
void Connect(){ // ѕроверка св€зи длитс€ 5 минут, потом решаем что ее нет////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   datetime time=TimeLocal(); 
   while (!IsConnected()){
      Sleep(1000); 
      TerminalHold(60); // удерживаем терминал, чтобы эксперты не перехватывали его бесцельно друг у друга. —в€зи все равно нет.
      if (TimeLocal()-time>120) {Report("Connect Waiting time > 2 minute!");  return;} // ждали 2 мин, не дождались
   }  }
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
void ContextBusy(){ // провер€ет поток дл€ выполнени€ торговых операций
   datetime time=TimeLocal();   
   while (IsTradeContextBusy()){ // ѕовторить попытку только после того, как функци€ IsTradeContextBusy вернет FALSE.
      Sleep(5000);                              
      if (TimeLocal()-time>300) {Report("ContextBusy Waiting time > 5 Minute!");  return;} // ждали 5 минут, не дождались
   }  }
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
void ERROR_LOG(){
   string RiskCheck, Position;
   if (SetBUY>0){ // момент открыти€ позы в лонг
      Position="SetBUY "+DoubleToStr(SetBUY,Digits)+"/"+DoubleToStr(SetSTOP_BUY,Digits)+"/"+DoubleToStr(SetPROFIT_BUY,Digits);
      RiskCheck=DoubleToStr(RiskChecker(Lot,SetBUY-SetSTOP_BUY,Symbol()),2);   
      }
   //   else { Position="ModBUY "+DoubleToStr(BUY+BUYSTOP+BUYLIMIT,Digits)+"/"+DoubleToStr(STOP_BUY,Digits)+"/"+DoubleToStr(PROFIT_BUY,Digits);}
   if (SetSELL>0){// момент открыти€ позы в шорт
      Position="SetSELL "+DoubleToStr(SetSELL,Digits)+"/"+DoubleToStr(SetSTOP_SELL,Digits)+"/"+DoubleToStr(SetPROFIT_SELL,Digits);
      RiskCheck=DoubleToStr(RiskChecker(Lot,SetSTOP_SELL-SetSELL,Symbol()),2);   
      }
   //   else {Position="ModSELL "+DoubleToStr(SELL+SELLSTOP+SELLLIMIT,Digits)+"/"+DoubleToStr(STOP_SELL,Digits)+"/"+DoubleToStr(PROFIT_SELL,Digits);}
      
   string ErrorFileName="ERROR_"+DoubleToStr(Magic,0)+"_"+ExpertName+".csv";
   Str1="ServerTime";            Prm1="-"+TimeToStr(Time[0],TIME_DATE|TIME_SECONDS);
   Str2="Ask/Bid/StpLev/Spred";  Prm2=DoubleToStr(Ask,Digits)+"/"+DoubleToStr(Bid,Digits)+"/"+DoubleToStr(MarketInfo(Symbol(),MODE_STOPLEVEL)*Point,Digits)+"/"+DoubleToStr(Spred,Digits);
   Str3="Pos/Stp/Prf";           Prm3=Position;
   Str4="Lot/RiskCheck/Ticket";  Prm4=DoubleToStr(Lot,LotDigits)+"/"+RiskCheck+"/"+DoubleToStr(OrderTicket(),0);
   Str5="Error";                 Prm5=str;
   Str6="Expir";                 Prm6=DoubleToStr(Expiration,1);
   Str7="UP1/DN1";               Prm7=DoubleToStr(UP1,Digits)+"/"+DoubleToStr(DN1,Digits);
   Str8="UP2/DN2";               Prm8=DoubleToStr(UP2,Digits)+"/"+DoubleToStr(DN2,Digits);
   Str9="UP3/DN3";               Prm9=DoubleToStr(UP3,Digits)+"/"+DoubleToStr(DN3,Digits);
   // ----- 
   Str13="RISK";                 Prm13=DoubleToStr(Risk,1);
   TESTER_FILE_CREATE(ExpertName, ErrorFileName); // создание файла отчета со всеми характеристиками  //
   FileClose(TesterFile);
   }
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
// ∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆∆
   
   
   // if (err==134) return; // 134-сама€ распространенна€ ошибка при оптимизации, 130-на NDD счетах, где стопы=0
   /*if (err==3){// »сключение ошибки тестера, когда сделки совершаютс€ (в 14:28 на ћ30) или (в 13:59 на Ќ1).   
      temp=1.0/Period()*Minute(); // ƒл€ этого выдел€ем разницу между временем сделки и временем “‘ 
      temp-=MathRound(temp);      // (должна равн€тьс€ 0), 
      if (temp!=0) return; // и игнорируем ошибку, если есть эта разница
      }*/